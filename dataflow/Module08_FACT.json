{
	"name": "Module08_FACT",
	"properties": {
		"folder": {
			"name": "Module08"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Module_8_movies_vOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "vOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "Module_8_DataMart_DimMovie",
						"type": "DatasetReference"
					},
					"name": "DimMovie"
				},
				{
					"dataset": {
						"referenceName": "Module_8_DataMart_DimDate",
						"type": "DatasetReference"
					},
					"name": "DimDate"
				},
				{
					"dataset": {
						"referenceName": "Module_8_DataMart_DimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineService"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Module_8_DataMart_FactOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "Module_8_DataMart_FactOnlinePurchase_MonthlySnapshot",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchaseMonthlySnapshot"
				}
			],
			"transformations": [
				{
					"name": "joinDimMovie"
				},
				{
					"name": "joinDimDate"
				},
				{
					"name": "joinDimOnlineService"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ServiceCode as string,",
				"          MovieidNK as integer,",
				"          Price as decimal(4,1),",
				"          TransactionDate as date,",
				"          TransactionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> vOnlinePurchase",
				"source(output(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimMovie",
				"source(output(",
				"          TheDateKey as integer,",
				"          TheDate as date,",
				"          TheDay as integer,",
				"          TheDayName as string,",
				"          TheWeek as integer,",
				"          TheISOWeek as integer,",
				"          TheDayOfWeek as integer,",
				"          TheMonth as integer,",
				"          TheMonthName as string,",
				"          TheQuarter as integer,",
				"          TheYear as integer,",
				"          TheFirstOfMonth as date,",
				"          TheLastOfYear as date,",
				"          TheDayOfYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimDate",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimOnlineService",
				"vOnlinePurchase, DimMovie join(vOnlinePurchase@MovieidNK == DimMovie@MovieIdNK,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimMovie",
				"joinDimMovie, DimDate join(TransactionDate == TheDate,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimDate",
				"joinDimDate, DimOnlineService join(vOnlinePurchase@ServiceCode == DimOnlineService@ServiceCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimOnlineService",
				"joinDimOnlineService aggregate(groupBy(TheMonth,",
				"          MovieKey,",
				"          ServiceKey),",
				"     PurchaseAmount = sum(Price),",
				"          PurchaseQuantity = count()) ~> aggregate1",
				"joinDimOnlineService sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DateKey as integer,",
				"          OnlineServiceKey as integer,",
				"          MovieKey as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          DateKey = TheDateKey,",
				"          OnlineServiceKey = ServiceKey,",
				"          MovieKey,",
				"          Price,",
				"          TransactionId",
				"     )) ~> FactOnlinePurchase",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MonthKey as integer,",
				"          OnlineServiceKey as integer,",
				"          PurchaseAmount as decimal(10,1),",
				"          PurchaseQuantity as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MonthKey = TheMonth,",
				"          OnlineServiceKey = ServiceKey,",
				"          PurchaseAmount,",
				"          PurchaseQuantity",
				"     )) ~> FactOnlinePurchaseMonthlySnapshot"
			]
		}
	}
}