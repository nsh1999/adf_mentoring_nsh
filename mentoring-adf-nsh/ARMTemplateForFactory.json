{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-nsh"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorageSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageSource'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureStorageLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureStorageLinkedService'"
		},
		"CinemaTickets_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CinemaTickets'"
		},
		"MelbourneSourceLink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MelbourneSourceLink'"
		},
		"movies_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'movies'"
		},
		"on_prem_movies_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'on_prem_movies'"
		},
		"on_prem_sql_server_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'on_prem_sql_server'"
		},
		"AzureBlobStorage2_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "DUMMY"
		},
		"AzureBlobStorageTarget_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalaknsh.blob.core.windows.net/"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalaknsh.dfs.core.windows.net/"
		},
		"AzureKeyDataFactory_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-nsh.vault.azure.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-nsh.vault.azure.net/"
		},
		"DUMMY_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'DUMMY'"
		},
		"DUMMY_properties_typeProperties_sasToken_secretName": {
			"type": "string",
			"defaultValue": "DUMMY"
		},
		"Data_Factoy_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-nsh.vault.azure.net/"
		},
		"Logging_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalaknsh.blob.core.windows.net/"
		},
		"Module7online_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'Module7online'"
		},
		"Module7online_properties_typeProperties_sasToken_secretName": {
			"type": "string",
			"defaultValue": "onlineToken"
		},
		"Module7onlineSink_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'Module7onlineSink'"
		},
		"Module7onlineSink_properties_typeProperties_sasToken_secretName": {
			"type": "string",
			"defaultValue": "OnlineMoviesBlob"
		},
		"Module_8_ DataMart_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "sqlguro"
		},
		"myNewTarget_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalaknsh.blob.core.windows.net"
		},
		"Trigger_wvc_properties_pipeline_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"Trigger_wvc_properties_pipeline_parameters_windowEnd": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy CinemaTickets",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.Tickets"
							},
							{
								"name": "Destination",
								"value": "stg.cinema_tickets"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT\n[CinemaCode]\n      ,[CinemaName]\n      ,[MovieId]\n      ,[TicketCount]\n      ,[TicketPrice]\n      ,[TransactionId]\n      ,[TransactionDt]\nfrom [dbo].[Tickets]\nwhere [TransactionDt] > '@{activity('LookupOldWaterMarkActivity').output.firstRow.OldWatermarkvalue}' and [TransactionDt] <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.cinema_tickets",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Tickets_souce",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "cinema_tickets_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX([WatermarkValue]) [OldWatermarkvalue],[TableName]\nFROM [dbo].[watermarktable]\nwhere [TableName] = 'Tickets'\nGROUP BY [TableName]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tickets_souce",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select  max([TransactionDt]) NewWatermarkValue\nfrom [dbo].[Tickets]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tickets_souce",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "spPopulatetCinema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy CinemaTickets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinema]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "WriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateCinemaTickets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateCinemaTickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulatetCinema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module06"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-17T10:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Tickets_souce')]",
				"[concat(variables('factoryId'), '/datasets/cinema_tickets_sink')]",
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyCredits2Blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "StartTS",
								"value": "\"now\""
							},
							{
								"name": "Source",
								"value": "movies//credits.csv"
							},
							{
								"name": "Destination",
								"value": "raw/movies/@{concat(replace('credits.csv','.csv','_'), formatDateTime(convertTimeZone(utcnow(),'UTC','W. Europe Standard Time'),'yyyyMMddHHmmss'), '.csv')}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"validateDataConsistency": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorageTarget",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataset",
								"type": "DatasetReference",
								"parameters": {
									"theSourceFileName": {
										"value": "@pipeline().parameters.theFileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CreditsWrite",
								"type": "DatasetReference",
								"parameters": {
									"theSourceFileName": {
										"value": "@pipeline().parameters.theFileName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"theFileName": {
						"type": "string"
					}
				},
				"variables": {
					"StartTS": {
						"type": "String",
						"defaultValue": "formatDateTime(convertTimeZone(utcnow(),'UTC','W. Europe Standard Time'),'yyyyMMddHHmmss')"
					},
					"sourceFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "old"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-26T12:15:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobDataset')]",
				"[concat(variables('factoryId'), '/datasets/CreditsWrite')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyCredits2Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "StartTS",
								"value": "\"now\""
							},
							{
								"name": "Source",
								"value": "movies//credits.csv"
							},
							{
								"name": "Destination",
								"value": "raw/movies/@{concat(replace('credits.csv','.csv','_'), formatDateTime(convertTimeZone(utcnow(),'UTC','W. Europe Standard Time'),'yyyyMMddHHmmss'), '.csv')}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"validateDataConsistency": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorageTarget",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataset",
								"type": "DatasetReference",
								"parameters": {
									"theSourceFileName": {
										"value": "@activity('Get Metadata1').output.itemName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CreditsWrite",
								"type": "DatasetReference",
								"parameters": {
									"theSourceFileName": {
										"value": "@activity('Get Metadata1').output.itemName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceBlobDataset",
								"type": "DatasetReference",
								"parameters": {
									"theSourceFileName": "*.csv"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Copy data1').output",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceBlobDataset",
											"type": "DatasetReference",
											"parameters": {
												"theSourceFileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CreditsWrite",
											"type": "DatasetReference",
											"parameters": {
												"theSourceFileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"theFileName": {
						"type": "string"
					}
				},
				"variables": {
					"StartTS": {
						"type": "String",
						"defaultValue": "formatDateTime(convertTimeZone(utcnow(),'UTC','W. Europe Standard Time'),'yyyyMMddHHmmss')"
					},
					"sourceFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "old"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-26T12:15:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobDataset')]",
				"[concat(variables('factoryId'), '/datasets/CreditsWrite')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaCopyPipeline_wvc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 7",
				"activities": [
					{
						"name": "Copy_wvc",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "movies//"
							},
							{
								"name": "Destination",
								"value": "raw/movies/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.windowStart",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().parameters.windowEnd",
										"type": "Expression"
									},
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "onlineSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_wvc",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String",
						"defaultValue": "2023-01-01"
					},
					"windowEnd": {
						"type": "String",
						"defaultValue": "2023-05-17"
					}
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-17T13:41:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/onlineSource')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_wvc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FirstDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new and changed files only by using LastModifiedDate",
				"activities": [
					{
						"name": "CopyNewFiles",
						"description": "Copy new and changed files only by using LastModifiedDate",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@{pipeline().parameters.LastModified_From}",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@{pipeline().parameters.LastModified_To}",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "*",
										"type": "Expression"
									}
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSourceStore",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.FolderPath_Source",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory_Source",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestinationStore",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.FolderPath_Destination",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory_Destination",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderPath_Source": {
						"type": "String",
						"defaultValue": "movies"
					},
					"Directory_Source": {
						"type": "String",
						"defaultValue": "."
					},
					"FolderPath_Destination": {
						"type": "String",
						"defaultValue": "raw"
					},
					"Directory_Destination": {
						"type": "String",
						"defaultValue": "movies"
					},
					"LastModified_From": {
						"type": "String",
						"defaultValue": "2019-02-01T00:00:00Z"
					},
					"LastModified_To": {
						"type": "String",
						"defaultValue": "2023-05-17T10:27:00Z"
					}
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-17T10:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryDataSourceStore')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDataDestinationStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select MAX(LastModifytime) as NewWatermarkvalue from data_source_table",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.data_source_table"
							},
							{
								"name": "Destination",
								"value": "raw/wombats/@{CONCAT('Incremental-', pipeline().RunId, '.txt')}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from data_source_table where LastModifytime > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and LastModifytime <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "PersonID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PersonID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LastModifytime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "LastModifytime",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module06"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-17T10:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadStage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate_Ratings_part",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RawRatings_part",
								"type": "DatasetReference",
								"parameters": {
									"theFileName": "ratings_part1_20230322103753.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate_Ratings_part",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[stage_rating_part_truncate]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TheFileName": {
						"type": "string",
						"defaultValue": "ratings_part1_20230322103753.csv"
					}
				},
				"folder": {
					"name": "old"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-26T12:15:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RawRatings_part')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master_Blob_Source')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceBlobDataset",
								"type": "DatasetReference",
								"parameters": {
									"theSourceFileName": "*.csv"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "Logging",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceBlobDataset",
											"type": "DatasetReference",
											"parameters": {
												"theSourceFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CreditsWrite",
											"type": "DatasetReference",
											"parameters": {
												"theSourceFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"myFileName": {
						"type": "Array"
					},
					"X": {
						"type": "String"
					}
				},
				"folder": {
					"name": "old"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-26T12:15:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobDataset')]",
				"[concat(variables('factoryId'), '/datasets/CreditsWrite')]",
				"[concat(variables('factoryId'), '/linkedServices/Logging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_98n_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "START",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "SWITCH START",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "COPY_START_02",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).container}/@{json(item().SourceObjectSettings).folderPath}/@{json(item().SourceObjectSettings).fileName}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": {
																		"value": "@json(item().CopySourceSettings).recursive",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@json(item().CopySourceSettings).wildcardFileName",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": {
																		"value": "@json(item().CopySourceSettings).enablePartitionDiscovery",
																		"type": "Expression"
																	}
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings",
																	"skipLineCount": {
																		"value": "@json(item().CopySourceSettings).skipLineCount",
																		"type": "Expression"
																	}
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_98n_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_columnDelimiter": {
																		"value": "@json(item().SourceObjectSettings).columnDelimiter",
																		"type": "Expression"
																	},
																	"cw_rowDelimiter": {
																		"value": "@json(item().SourceObjectSettings).rowDelimiter",
																		"type": "Expression"
																	},
																	"cw_escapeChar": {
																		"value": "@json(item().SourceObjectSettings).escapeChar",
																		"type": "Expression"
																	},
																	"cw_quoteChar": {
																		"value": "@json(item().SourceObjectSettings).quoteChar",
																		"type": "Expression"
																	},
																	"cw_firstRowAsHeader": {
																		"value": "@json(item().SourceObjectSettings).firstRowAsHeader",
																		"type": "Expression"
																	},
																	"cw_fileName": {
																		"value": "@json(item().SourceObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SourceObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_container": {
																		"value": "@json(item().SourceObjectSettings).container",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_98n_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "COPY_START_02",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[log_common]",
															"storedProcedureParameters": {
																"activity_name": {
																	"value": "COPY START 02",
																	"type": "String"
																},
																"pipeline_name": {
																	"value": {
																		"value": "@pipeline().Pipeline",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"pipeline_Run_ID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Top_pipeline_Run_ID": {
																	"value": {
																		"value": "@pipeline().parameters.Top_pipeline_Run_ID",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"filename": {
																	"value": {
																		"value": "@json(item().SourceObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "movies",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "COPY_END_02",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "BILLING",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[log_common]",
															"storedProcedureParameters": {
																"activity_name": {
																	"value": "COPY END 02",
																	"type": "String"
																},
																"pipeline_name": {
																	"value": {
																		"value": "@pipeline().Pipeline",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"pipeline_Run_ID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Top_pipeline_Run_ID": {
																	"value": {
																		"value": "@pipeline().parameters.Top_pipeline_Run_ID",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"filename": {
																	"value": {
																		"value": "@json(item().SourceObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "movies",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "BILLING",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "FullLoadOneObject",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[log_Billing]",
															"storedProcedureParameters": {
																"activity": {
																	"value": {
																		"value": "activity('FullLoadOneObject').output.executionDetails[0].duration",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"activity_name": {
																	"value": "COPY DATA",
																	"type": "String"
																},
																"billing_duration": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.executionDetails[0].duration",
																		"type": "Expression"
																	},
																	"type": "Double"
																},
																"meter_type": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.billingReference.billableDuration[0].meterType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"number_of_parallel_copies": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.usedParallelCopies",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"number_of_processed_files": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.filesRead",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"number_of_read_rows": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.rowsRead",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"number_of_used_DIU": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.usedDataIntegrationUnits",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"number_of_written_rows": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.rowsCopied",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"pipeline_Run_ID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"filename": {
																	"value": {
																		"value": "@json(item().SourceObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"start_time": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.executionDetails[0].start",
																		"type": "Expression"
																	},
																	"type": "Datetime"
																},
																"end_time": {
																	"value": {
																		"value": "@addseconds(activity('FullLoadOneObject').output.executionDetails[0].start, activity('FullLoadOneObject').output.executionDetails[0].duration)",
																		"type": "Expression"
																	},
																	"type": "Datetime"
																},
																"status": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.executionDetails[0].status",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"queue_duration": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.executionDetails[0].detailedDurations.queuingDuration",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"transfer_duration": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.executionDetails[0].detailedDurations.transferDuration",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"copy_duration": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.copyDuration",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"duration": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.executionDetails[0].duration",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "movies",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "log_error_details",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "FullLoadOneObject",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[log_error_details]",
															"storedProcedureParameters": {
																"activity_name": {
																	"value": "ERROR HANDLING",
																	"type": "String"
																},
																"error_code": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].Code",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"error_message": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].Message",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"failure_type": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].EventType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"pipeline_name": {
																	"value": {
																		"value": "@pipeline().Pipeline",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"pipeline_Run_ID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Top_pipeline_Run_ID": {
																	"value": {
																		"value": "@pipeline().parameters.Top_pipeline_Run_ID",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Category": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].Category",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Data": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].Data",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"MsgId": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].MsgId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"ExceptionType": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].ExceptionType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Source": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].Source",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StackTrace": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].StackTrace",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"InnerEventInfos": {
																	"value": {
																		"value": "@activity('FullLoadOneObject').output.errors[0].InnerEventInfos",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "movies",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "COPY_START_01",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).container}/@{json(item().SourceObjectSettings).folderPath}/@{json(item().SourceObjectSettings).fileName}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": {
																"value": "@json(item().CopySourceSettings).recursive",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@json(item().CopySourceSettings).wildcardFileName",
																"type": "Expression"
															},
															"enablePartitionDiscovery": {
																"value": "@json(item().CopySourceSettings).enablePartitionDiscovery",
																"type": "Expression"
															}
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings",
															"skipLineCount": {
																"value": "@json(item().CopySourceSettings).skipLineCount",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "@json(item().CopySinkSettings).preCopyScript",
															"type": "Expression"
														},
														"tableOption": {
															"value": "@json(item().CopySinkSettings).tableOption",
															"type": "Expression"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_98n_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_columnDelimiter": {
																"value": "@json(item().SourceObjectSettings).columnDelimiter",
																"type": "Expression"
															},
															"cw_rowDelimiter": {
																"value": "@json(item().SourceObjectSettings).rowDelimiter",
																"type": "Expression"
															},
															"cw_escapeChar": {
																"value": "@json(item().SourceObjectSettings).escapeChar",
																"type": "Expression"
															},
															"cw_quoteChar": {
																"value": "@json(item().SourceObjectSettings).quoteChar",
																"type": "Expression"
															},
															"cw_firstRowAsHeader": {
																"value": "@json(item().SourceObjectSettings).firstRowAsHeader",
																"type": "Expression"
															},
															"cw_fileName": {
																"value": "@json(item().SourceObjectSettings).fileName",
																"type": "Expression"
															},
															"cw_folderPath": {
																"value": "@json(item().SourceObjectSettings).folderPath",
																"type": "Expression"
															},
															"cw_container": {
																"value": "@json(item().SourceObjectSettings).container",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_98n_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SinkObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SinkObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "COPY_START_01",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[log_common]",
													"storedProcedureParameters": {
														"activity_name": {
															"value": "COPY START 01",
															"type": "String"
														},
														"pipeline_name": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"pipeline_Run_ID": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"Top_pipeline_Run_ID": {
															"value": {
																"value": "@pipeline().parameters.Top_pipeline_Run_ID",
																"type": "Expression"
															},
															"type": "String"
														},
														"filename": {
															"value": {
																"value": "@json(item().SourceObjectSettings).fileName",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "movies",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "COPY_END_01",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "DefaultFullLoadOneObject",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[log_common]",
													"storedProcedureParameters": {
														"activity_name": {
															"value": "COPY END 01",
															"type": "String"
														},
														"pipeline_name": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"pipeline_Run_ID": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"Top_pipeline_Run_ID": {
															"value": {
																"value": "@pipeline().parameters.Top_pipeline_Run_ID",
																"type": "Expression"
															},
															"type": "String"
														},
														"filename": {
															"value": {
																"value": "@json(item().SourceObjectSettings).fileName",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "movies",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "SWITCH START",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[log_common]",
										"storedProcedureParameters": {
											"activity_name": {
												"value": "SWITCH START",
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_Run_ID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Top_pipeline_Run_ID": {
												"value": {
													"value": "@pipeline().parameters.Top_pipeline_Run_ID",
													"type": "Expression"
												},
												"type": "String"
											},
											"filename": {
												"value": {
													"value": "@json(item().SourceObjectSettings).fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "movies",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "START",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[log_common]",
							"storedProcedureParameters": {
								"activity_name": {
									"value": {
										"value": "START",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Top_pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().parameters.Top_pipeline_Run_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"filename": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "END",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ListObjectsFromOneGroup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[log_common]",
							"storedProcedureParameters": {
								"activity_name": {
									"value": "END",
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Top_pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().parameters.Top_pipeline_Run_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"filename": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					},
					"Top_pipeline_Run_ID": {
						"type": "string"
					}
				},
				"variables": {
					"X": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_98n_20230627"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-06T09:35:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_98n_SourceDS')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_98n_DestinationDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_98n_MiddleLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "START",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "FOREACH_LEVEL_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_98n_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_98n_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											},
											"Top_pipeline_Run_ID": {
												"value": "@pipeline().parameters.Top_pipeline_Run_ID",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "FOREACH_LEVEL_2",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[log_common]",
										"storedProcedureParameters": {
											"activity_name": {
												"value": "FOREACH LEVEL 2",
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_Run_ID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Top_pipeline_Run_ID": {
												"value": {
													"value": "@pipeline().parameters.Top_pipeline_Run_ID",
													"type": "Expression"
												},
												"type": "String"
											},
											"filename": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "movies",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "START",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[log_common]",
							"storedProcedureParameters": {
								"activity_name": {
									"value": "START",
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Top_pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().parameters.Top_pipeline_Run_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"filename": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "END",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DivideOneBatchIntoMultipleGroups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[log_common]",
							"storedProcedureParameters": {
								"activity_name": {
									"value": "END",
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Top_pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().parameters.Top_pipeline_Run_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"filename": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					},
					"Top_pipeline_Run_ID": {
						"type": "string"
					}
				},
				"variables": {
					"metadate": {
						"type": "String"
					},
					"M1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_98n_20230627"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-04T20:59:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_98n_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_98n_BottomLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_98n_TopLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "START",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDrivenCopyTask_98n_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "FOREACH",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_98n_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											},
											"Top_pipeline_Run_ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "FOREACH",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[log_common]",
										"storedProcedureParameters": {
											"activity_name": {
												"value": "FOREACH",
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_Run_ID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Top_pipeline_Run_ID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"filename": {
												"value": "hello",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "movies",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "START",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[log_common]",
							"storedProcedureParameters": {
								"activity_name": {
									"value": "START",
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Top_pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"filename": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "END",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyBatchesOfObjectsSequentially",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[log_common]",
							"storedProcedureParameters": {
								"activity_name": {
									"value": "END",
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Top_pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"filename": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "log_error_details",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "START",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[log_error_details]",
							"storedProcedureParameters": {
								"activity_name": {
									"value": "ERROR HANDLING",
									"type": "String"
								},
								"error_code": {
									"value": {
										"value": "@activity('START').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"error_message": {
									"value": null,
									"type": "String"
								},
								"failure_type": {
									"value": null,
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Top_pipeline_Run_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "etl.tControlMetadata"
					}
				},
				"variables": {
					"metadate": {
						"type": "String"
					},
					"M1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_98n_20230627"
				},
				"annotations": [
					"MetadataDrivenSolution"
				],
				"lastPublishTime": "2023-07-17T15:13:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_98n_ControlDS')]",
				"[concat(variables('factoryId'), '/linkedServices/movies')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_98n_MiddleLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module08_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Module08_DIM",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module08_DIM",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tMovies": {},
									"tOnlineService": {},
									"DimMovie": {},
									"DimOnlineService": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-21T14:12:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Module08_DIM')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module08_FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Module08_FACT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module08_FACT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"vOnlinePurchase": {},
									"DimMovie": {},
									"DimDate": {},
									"DimOnlineService": {},
									"FactOnlinePurchase": {},
									"FactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-22T08:48:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Module08_FACT')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module08_FACT_V2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Module08_FACT_V2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module08_FACT_V2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"vOnlinePurchase": {},
									"DimMovie": {},
									"DimOnlineService": {},
									"FactOnlinePurchase": {},
									"FactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T13:18:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Module08_FACT_V2')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module5_3NF_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "2 spPopulateMovieStatus",
						"description": "step 1/9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LOAD MOVIE METADATA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "1 spPopulateCast",
						"description": "step 6/9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LOAD CREDITS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "4 spPopulatetRatings",
						"description": "step 5/9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LOAD RATINGS",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "3 spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "4 spPopulateMoviesGenreMap",
						"description": "step 4/9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "2 spPopulateGenre",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "3 spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "2 spPopulateGenre",
						"description": "step 3/9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LOAD MOVIE METADATA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "3 spPopulateMovies",
						"description": "step 2/9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "2 spPopulateMovieStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "spPopulateMovies"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "2 spPopulateCompany",
						"description": "step 8/9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LOAD MOVIE METADATA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "4 spPopulateMoviesCastMap",
						"description": "step 7/9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "1 spPopulateCast",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "3 spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "4 spPopulateMoviesCompanyMap",
						"description": "step 9/9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "2 spPopulateCompany",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "3 spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LOAD CREDITS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LOAD MOVIE METADATA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/movies/"
							},
							{
								"name": "Destination",
								"value": "stg.credits"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": {
											"value": "$$FILEPATH",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "credits*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE STG.CREDITS",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "Logging",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "read_lake_credits",
								"type": "DatasetReference",
								"parameters": {
									"filename": "credits*.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LOAD RATINGS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LOAD CREDITS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/movies/"
							},
							{
								"name": "Destination",
								"value": "stg.ratings"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "ratings*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE STG.RATINGS",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "Logging",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "read_ratings_part_from_lake_comma",
								"type": "DatasetReference",
								"parameters": {
									"filename": "ratings*.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "stg_ratings_part",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LOAD MOVIE METADATA",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/movies/"
							},
							{
								"name": "Destination",
								"value": "stg.movies_metadata"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": {
											"value": "$$FILEPATH",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "movies_metadata*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[movies_metadata]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "Logging",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "read_movies_metadata_from_lake_comma",
								"type": "DatasetReference",
								"parameters": {
									"filename": "movies_metadata*.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "stg_movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module05"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-17T10:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]",
				"[concat(variables('factoryId'), '/datasets/read_lake_credits')]",
				"[concat(variables('factoryId'), '/datasets/movies')]",
				"[concat(variables('factoryId'), '/datasets/read_ratings_part_from_lake_comma')]",
				"[concat(variables('factoryId'), '/datasets/stg_ratings_part')]",
				"[concat(variables('factoryId'), '/datasets/read_movies_metadata_from_lake_comma')]",
				"[concat(variables('factoryId'), '/datasets/stg_movies_metadata')]",
				"[concat(variables('factoryId'), '/linkedServices/Logging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module5_Archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FIND CSV FILES TO ARCHIVE",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryReader",
								"type": "DatasetReference",
								"parameters": {
									"TheFileName": "*.csv"
								}
							},
							"fieldList": [
								"childItems",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ARCHIVE CSV",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FIND CSV FILES TO ARCHIVE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FIND CSV FILES TO ARCHIVE').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 4,
							"activities": [
								{
									"name": "IT IS A FILE FOR ARCHIVE",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().type, 'File')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "ARCHIVE THE CSV",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"deleteFilesAfterCompletion": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false,
													"logSettings": {
														"enableCopyActivityLog": true,
														"copyActivityLogSettings": {
															"logLevel": "Info",
															"enableReliableLogging": false
														},
														"logLocationSettings": {
															"linkedServiceName": {
																"referenceName": "Logging",
																"type": "LinkedServiceReference"
															}
														}
													}
												},
												"inputs": [
													{
														"referenceName": "BinaryReader",
														"type": "DatasetReference",
														"parameters": {
															"TheFileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "BinaryWriter",
														"type": "DatasetReference",
														"parameters": {
															"TheFIleName": "@item().name",
															"ThePath": "movies/done"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"BATCH_TIMESTAMP": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Module05"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-17T10:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryReader')]",
				"[concat(variables('factoryId'), '/datasets/BinaryWriter')]",
				"[concat(variables('factoryId'), '/linkedServices/Logging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module5_CSV_Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FIND CSV FILES TO PROCESS",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "BATCH_TIMESTAMP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryReader_source",
								"type": "DatasetReference",
								"parameters": {
									"TheFileName": "*.csv"
								}
							},
							"fieldList": [
								"childItems",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "DELIVER CSV",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FIND CSV FILES TO PROCESS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FIND CSV FILES TO PROCESS').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 4,
							"activities": [
								{
									"name": "IT IS A FILE TO DELIVER",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().type, 'File')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DELIVER_THE_CSV",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "//@{item().name}"
													},
													{
														"name": "Destination",
														"value": "raw/@{'movies'}/@{concat(replace(item().name,'.csv','_'), formatDateTime(convertTimeZone(utcnow(),'UTC','W. Europe Standard Time'),'yyyyMMddHHmmss'), '.csv')}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false,
													"logSettings": {
														"enableCopyActivityLog": true,
														"copyActivityLogSettings": {
															"logLevel": "Info",
															"enableReliableLogging": false
														},
														"logLocationSettings": {
															"linkedServiceName": {
																"referenceName": "Logging",
																"type": "LinkedServiceReference"
															}
														}
													}
												},
												"inputs": [
													{
														"referenceName": "BinaryReader_source",
														"type": "DatasetReference",
														"parameters": {
															"TheFileName": "@item().name"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "BinaryWriter",
														"type": "DatasetReference",
														"parameters": {
															"TheFIleName": {
																"value": "@concat(replace(item().name,'.csv','_'), variables('BATCH_TIMESTAMP'), '.csv')",
																"type": "Expression"
															},
															"ThePath": "movies"
														}
													}
												]
											},
											{
												"name": "Web1_ERROR",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "DELIVER_THE_CSV",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": {
														"value": "@activity('Web2').output.value",
														"type": "Expression"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"value": "{\n\"dataFactoryName\": \"@{pipeline().DataFactory}\",\n\"error_message\": \"@{activity('DELIVER_THE_CSV').output.errors[0].Message}\",\n\"message\": \"@{pipeline().GroupId}\",\n\"pipelineName\": \"@{pipeline().Pipeline}\",\n\"pipelineRun\": \"@{pipeline().RunId}\",\n\"pipelineStatus\": \"@{activity('DELIVER_THE_CSV').output.errors[0].Code}\",\n\"receiver\": \"@{pipeline().parameters.receiver}\"\n}\n\n",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "BATCH_TIMESTAMP",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "BATCH_TIMESTAMP",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','W. Europe Standard Time'),'yyyyMMddHHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "DELIVER CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('Web2').output.value",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"dataFactoryName\": \"@{pipeline().DataFactory}\",\n\"error_message\": \"OK\",\n\"message\": \"COMPLETED OK\",\n\"pipelineName\": \"@{pipeline().Pipeline}\",\n\"pipelineRun\": \"@{pipeline().RunId}\",\n\"pipelineStatus\": \"OK\"\",\n\"receiver\": \"@{pipeline().parameters.receiver}\"\n}\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://mentoring-key-vault-nsh.vault.azure.net/secrets/HTTP-POST/bf990bb5a2e946a798788b7195a01267?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "niels_stig_hansen@epam.com"
					}
				},
				"variables": {
					"BATCH_TIMESTAMP": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Module05"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-03T17:06:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryReader_source')]",
				"[concat(variables('factoryId'), '/datasets/BinaryWriter')]",
				"[concat(variables('factoryId'), '/linkedServices/Logging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module5_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Module5_Archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Module5_3NF_LOAD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module5_Archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Module5_CSV_Copy",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module5_CSV_Copy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Module5_3NF_LOAD",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Module5_CSV_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module5_3NF_LOAD",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"BATCH_TIMESTAMP": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Module05"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-03T11:26:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Module5_Archive')]",
				"[concat(variables('factoryId'), '/pipelines/Module5_CSV_Copy')]",
				"[concat(variables('factoryId'), '/pipelines/Module5_3NF_LOAD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_7_Task_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy files incrementally",
				"activities": [
					{
						"name": "Copy files incrementally",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": {
								"value": "@pipeline().parameters.Degree_of_copy_parallelism",
								"type": "Expression"
							},
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "onlineSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "onlineSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COALESCE(MAX([WatermarkValue]),CONVERT(DATE,'1970-01-01',102)) [WatermarkValue]\nFROM [dbo].[watermarktable]\nWHERE  [TableName] = 'OnlineBlob'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy files incrementally",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "sourceName",
								"value": "OnlineBlob"
							}
						],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.sourceName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceName": {
						"type": "string",
						"defaultValue": "OnlineBlob"
					},
					"Degree_of_copy_parallelism": {
						"type": "int",
						"defaultValue": 16
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"PipelineStartTS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T09:55:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/onlineSource')]",
				"[concat(variables('factoryId'), '/datasets/onlineSink')]",
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_7_Task_5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy files incrementally",
				"activities": [
					{
						"name": "LoadingJSON",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "online//*"
							},
							{
								"name": "Destination",
								"value": "stg.online_purchase"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipelineid",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": "2023-06-04T00:00:00Z",
									"modifiedDatetimeEnd": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[online_purchase]",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.Degree_of_copy_parallelism",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineid']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								],
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "onlineJSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "onlineStagingSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LOAD_OnlinePurchase",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LOAD_OnlineService",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "sourceName",
								"value": "OnlineBlob"
							}
						],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LOAD_OnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LOAD_OnlineService",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadingJSON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "sourceName",
								"value": "OnlineBlob"
							}
						],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LOAD_OnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "movies",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceName": {
						"type": "string",
						"defaultValue": "OnlineStaging"
					},
					"Degree_of_copy_parallelism": {
						"type": "int",
						"defaultValue": 16
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-28T12:45:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/onlineJSON')]",
				"[concat(variables('factoryId'), '/datasets/onlineStagingSink')]",
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_7_Task_5_Archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Archiver",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryArchive_from",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryArchive_to",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-16T14:51:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryArchive_from')]",
				"[concat(variables('factoryId'), '/datasets/BinaryArchive_to')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_7_Task_5_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "COPY NEW JSON FILES",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module_7_Task_3",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourceName": "OnlineBlob",
								"Degree_of_copy_parallelism": 32,
								"DIU": 4
							}
						}
					},
					{
						"name": "LOAD JSON FILES",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "COPY NEW JSON FILES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module_7_Task_5",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourceName": "OnlineStaging",
								"Degree_of_copy_parallelism": 16,
								"DIU": 4
							}
						}
					},
					{
						"name": "ARCHIVE LOADED JSON FILES",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LOAD JSON FILES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module_7_Task_5_Archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-16T15:24:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Module_7_Task_3')]",
				"[concat(variables('factoryId'), '/pipelines/Module_7_Task_5')]",
				"[concat(variables('factoryId'), '/pipelines/Module_7_Task_5_Archive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/build2fail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "This was designed to FAIL",
							"errorCode": "20230717"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module10"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-17T13:12:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eraser')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LOAD MOVIE METADATA",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/movies/"
							},
							{
								"name": "Destination",
								"value": "stg.movies_metadata"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": {
											"value": "$$FILEPATH",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"maxConcurrentConnections": 8,
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "movies_metadata*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[movies_metadata]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "Logging",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "read_movies_metadata_from_lake_comma",
								"type": "DatasetReference",
								"parameters": {
									"filename": "movies_metadata*.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "stg_movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "2019-Kamyanka-9.jpg"
					}
				},
				"folder": {
					"name": "old"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-26T12:15:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/read_movies_metadata_from_lake_comma')]",
				"[concat(variables('factoryId'), '/datasets/stg_movies_metadata')]",
				"[concat(variables('factoryId'), '/linkedServices/Logging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/generateTickets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "generateTickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[generateTickets]"
						},
						"linkedServiceName": {
							"referenceName": "on_prem_sql_server",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Module06"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-17T10:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/on_prem_sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"structure"
							]
						}
					},
					{
						"name": "ID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "M1",
							"value": {
								"value": "@activity('Get Metadata1').output",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"M1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Module09"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-29T09:24:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movies_metadata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineMelburne')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MelbourneDataset",
								"type": "DatasetReference",
								"parameters": {
									"theFileName": {
										"value": "@pipeline().parameters.theFileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "MelbourneDelivery",
								"type": "DatasetReference",
								"parameters": {
									"theFileName": {
										"value": "@pipeline().parameters.theFileName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"theFileName": {
						"type": "string",
						"defaultValue": "ratings.csv"
					}
				},
				"folder": {
					"name": "old"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-26T12:15:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MelbourneDataset')]",
				"[concat(variables('factoryId'), '/datasets/MelbourneDelivery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "movieId",
						"type": "nvarchar"
					},
					{
						"name": "rating",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "ratings_part"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryArchive_from')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DUMMY",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DUMMY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryArchive_to')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DUMMY",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "done",
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DUMMY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataDestinationStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data destination store.  ",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string",
						"defaultValue": "movies"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataSourceStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data source store. ",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageSource",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryMetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DUMMY",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "string"
					},
					"cw_folderPath": {
						"type": "string"
					},
					"cw_container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().cw_container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DUMMY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryReader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TheFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().TheFileName",
							"type": "Expression"
						},
						"folderPath": "movies",
						"container": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryReader_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TheFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().TheFileName",
							"type": "Expression"
						},
						"container": "movies"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryWriter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TheFIleName": {
						"type": "string"
					},
					"ThePath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().TheFIleName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().ThePath",
							"type": "Expression"
						},
						"container": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CinemaTickets",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CinemaTickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreditsWrite')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"theSourceFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(replace(dataset().theSourceFileName,'.csv','_'), formatDateTime(convertTimeZone(utcnow(),'UTC','W. Europe Standard Time'),'yyyyMMddHHmmss'), '.csv')",
							"type": "Expression"
						},
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreditsWrite_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "myNewTarget",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/myNewTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "start.csv",
						"container": "log"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "log"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_wvc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "movies",
						"container": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MelbourneDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MelbourneSourceLink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"theFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().theFileName",
							"type": "Expression"
						},
						"folderPath": "Module 04",
						"container": "module04"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MelbourneSourceLink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MelbourneDelivery')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"theFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().theFileName",
							"type": "Expression"
						},
						"folderPath": "wombats",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_2eo_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_2eo_20230627"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "etl",
					"table": "tControlMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_2eo_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_2eo_20230627"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_2eo_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_columnDelimiter": {
						"type": "String"
					},
					"cw_rowDelimiter": {
						"type": "String"
					},
					"cw_escapeChar": {
						"type": "String"
					},
					"cw_quoteChar": {
						"type": "String"
					},
					"cw_firstRowAsHeader": {
						"type": "Bool"
					},
					"cw_fileName": {
						"type": "Object"
					},
					"cw_folderPath": {
						"type": "Object"
					},
					"cw_fileSystem": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_2eo_20230627"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().cw_fileSystem",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().cw_columnDelimiter",
						"type": "Expression"
					},
					"rowDelimiter": {
						"value": "@dataset().cw_rowDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().cw_escapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@dataset().cw_firstRowAsHeader",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().cw_quoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_98n_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_98n_20230627"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "etl",
					"table": "tControlMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_98n_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_98n_20230627"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_98n_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_columnDelimiter": {
						"type": "String"
					},
					"cw_rowDelimiter": {
						"type": "String"
					},
					"cw_escapeChar": {
						"type": "String"
					},
					"cw_quoteChar": {
						"type": "String"
					},
					"cw_firstRowAsHeader": {
						"type": "Bool"
					},
					"cw_fileName": {
						"type": "Object"
					},
					"cw_folderPath": {
						"type": "String"
					},
					"cw_container": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_98n_20230627"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().cw_container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().cw_columnDelimiter",
						"type": "Expression"
					},
					"rowDelimiter": {
						"value": "@dataset().cw_rowDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().cw_escapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@dataset().cw_firstRowAsHeader",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().cw_quoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_DataMart_DimDate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Module_8_ DataMart",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TheDateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheDate",
						"type": "date"
					},
					{
						"name": "TheDay",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheDayName",
						"type": "nvarchar"
					},
					{
						"name": "TheWeek",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheISOWeek",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheDayOfWeek",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheMonthName",
						"type": "nvarchar"
					},
					{
						"name": "TheQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheFirstOfMonth",
						"type": "date"
					},
					{
						"name": "TheLastOfYear",
						"type": "date"
					},
					{
						"name": "TheDayOfYear",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimDate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Module_8_ DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_DataMart_DimMovie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Module_8_ DataMart",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Module_8_ DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_DataMart_DimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Module_8_ DataMart",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Module_8_ DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_DataMart_FactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Module_8_ DataMart",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Module_8_ DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_DataMart_FactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Module_8_ DataMart",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Module_8_ DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_movies_tMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_movies_tOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_movies_tOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_movies_vOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module08"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawRatings_part')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"theFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().theFileName",
							"type": "Expression"
						},
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "userId",
						"type": "String"
					},
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "timestamp",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@CONCAT('Incremental-', pipeline().RunId, '.csv')",
							"type": "Expression"
						},
						"folderPath": "wombats",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"theSourceFileName": {
						"type": "string",
						"defaultValue": "credits.csv"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().theSourceFileName",
							"type": "Expression"
						},
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobDataset_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_wvc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageSource",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tickets_souce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "on_prem_sql_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module06"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/on_prem_sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cinema_tickets_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module06"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "credits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_cinema_tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceObjectSettings",
						"type": "nvarchar"
					},
					{
						"name": "SourceConnectionSettingsName",
						"type": "varchar"
					},
					{
						"name": "CopySourceSettings",
						"type": "nvarchar"
					},
					{
						"name": "SinkObjectSettings",
						"type": "nvarchar"
					},
					{
						"name": "SinkConnectionSettingsName",
						"type": "varchar"
					},
					{
						"name": "CopySinkSettings",
						"type": "nvarchar"
					},
					{
						"name": "CopyActivitySettings",
						"type": "nvarchar"
					},
					{
						"name": "TopLevelPipelineName",
						"type": "varchar"
					},
					{
						"name": "TriggerName",
						"type": "nvarchar"
					},
					{
						"name": "DataLoadingBehaviorSettings",
						"type": "nvarchar"
					},
					{
						"name": "TaskId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CopyEnabled",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "etl",
					"table": "vControlMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mySinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "myNewTarget",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/myNewTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/on_prem_movies_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "on_prem_movies",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SinkTableName": {
						"type": "string",
						"defaultValue": "customer_table"
					}
				},
				"folder": {
					"name": "Module06"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().SinkTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/on_prem_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onlineJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DUMMY",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*",
						"container": "online"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"serviceName": {
							"type": "string"
						},
						"serviceCode": {
							"type": "string"
						},
						"movieId": {
							"type": "integer"
						},
						"userId": {
							"type": "integer"
						},
						"price": {
							"type": "string"
						},
						"transaction": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"datetime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DUMMY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onlineJSON_archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DUMMY",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*",
						"folderPath": "done",
						"container": "online"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"serviceName": {
							"type": "string"
						},
						"serviceCode": {
							"type": "string"
						},
						"movieId": {
							"type": "integer"
						},
						"userId": {
							"type": "integer"
						},
						"price": {
							"type": "string"
						},
						"transaction": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"datetime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DUMMY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onlineSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Module7onlineSink",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Module7onlineSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onlineSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Module7online",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Module7online')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onlineStagingSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Module07"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "online_service_name",
						"type": "nvarchar"
					},
					{
						"name": "online_service_code",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "nvarchar"
					},
					{
						"name": "price",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/read_creadits_from_lake_comma')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "credits_20230403104940.csv"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/read_lake_credits')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "credits*.csv"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/read_movies_metadata_from_lake_comma')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "adult",
						"type": "String"
					},
					{
						"name": "belongs_to_collection",
						"type": "String"
					},
					{
						"name": "budget",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "homepage",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "imdb_id",
						"type": "String"
					},
					{
						"name": "original_language",
						"type": "String"
					},
					{
						"name": "original_title",
						"type": "String"
					},
					{
						"name": "overview",
						"type": "String"
					},
					{
						"name": "popularity",
						"type": "String"
					},
					{
						"name": "poster_path",
						"type": "String"
					},
					{
						"name": "production_companies",
						"type": "String"
					},
					{
						"name": "production_countries",
						"type": "String"
					},
					{
						"name": "release_date",
						"type": "String"
					},
					{
						"name": "revenue",
						"type": "String"
					},
					{
						"name": "runtime",
						"type": "String"
					},
					{
						"name": "spoken_languages",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "tagline",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "video",
						"type": "String"
					},
					{
						"name": "vote_average",
						"type": "String"
					},
					{
						"name": "vote_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/read_ratings_part_from_lake_comma')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "adult",
						"type": "String"
					},
					{
						"name": "belongs_to_collection",
						"type": "String"
					},
					{
						"name": "budget",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "homepage",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "imdb_id",
						"type": "String"
					},
					{
						"name": "original_language",
						"type": "String"
					},
					{
						"name": "original_title",
						"type": "String"
					},
					{
						"name": "overview",
						"type": "String"
					},
					{
						"name": "popularity",
						"type": "String"
					},
					{
						"name": "poster_path",
						"type": "String"
					},
					{
						"name": "production_companies",
						"type": "String"
					},
					{
						"name": "production_countries",
						"type": "String"
					},
					{
						"name": "release_date",
						"type": "String"
					},
					{
						"name": "revenue",
						"type": "String"
					},
					{
						"name": "runtime",
						"type": "String"
					},
					{
						"name": "spoken_languages",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "tagline",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "video",
						"type": "String"
					},
					{
						"name": "vote_average",
						"type": "String"
					},
					{
						"name": "vote_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stg_movies_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "movies_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stg_ratings_part')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "movieId",
						"type": "nvarchar"
					},
					{
						"name": "rating",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "ratings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Data_Factoy",
							"type": "LinkedServiceReference",
							"parameters": {
								"secretname": "DUMMY"
							}
						},
						"secretName": "[parameters('AzureBlobStorage2_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Factoy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The Primary data source",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageSource_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageTarget')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlobStorageTarget_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyDataFactory')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyDataFactory_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"AccountName": {
						"type": "string",
						"defaultValue": "azurementoringstoragensh"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]",
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStorageLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureStorageLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Obafgkmn42",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('CinemaTickets_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DUMMY')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('DUMMY_sasUri')]",
					"sasToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Data_Factoy",
							"type": "LinkedServiceReference",
							"parameters": {
								"secretname": "azurementoringstoragensh",
								"secretversion": "1e31786390274e148faf3a265cc40a85"
							}
						},
						"secretName": "[parameters('DUMMY_properties_typeProperties_sasToken_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Factoy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data_Factoy')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This does is not that descriptive",
				"parameters": {
					"secretname": {
						"type": "string",
						"defaultValue": "azurementoringstoragensh"
					},
					"secretversion": {
						"type": "string",
						"defaultValue": "1e31786390274e148faf3a265cc40a85"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Data_Factoy_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Logging')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('Logging_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MelbourneSourceLink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('MelbourneSourceLink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module7online')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('Module7online_sasUri')]",
					"sasToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Data_Factoy",
							"type": "LinkedServiceReference",
							"parameters": {
								"secretname": "azurementoringstoragensh",
								"secretversion": "1e31786390274e148faf3a265cc40a85"
							}
						},
						"secretName": "[parameters('Module7online_properties_typeProperties_sasToken_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Factoy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module7onlineSink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('Module7onlineSink_sasUri')]",
					"sasToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Data_Factoy",
							"type": "LinkedServiceReference",
							"parameters": {
								"secretname": "OnlineMoviesBlob",
								"secretversion": "Latest version"
							}
						},
						"secretName": "[parameters('Module7onlineSink_properties_typeProperties_sasToken_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data_Factoy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_ DataMart')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Data_Factoy",
							"type": "LinkedServiceReference",
							"parameters": {
								"secretname": "azurementoringstoragensh",
								"secretversion": "1e31786390274e148faf3a265cc40a85"
							}
						},
						"secretName": "[parameters('Module_8_ DataMart_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "Azure-IR-M8",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]",
				"[concat(variables('factoryId'), '/linkedServices/Data_Factoy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('movies_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/myNewTarget')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('myNewTarget_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/on_prem_movies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('on_prem_movies_connectionString')]"
				},
				"connectVia": {
					"referenceName": "runFromHome",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/runFromHome')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/on_prem_sql_server')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('on_prem_sql_server_connectionString')]"
				},
				"connectVia": {
					"referenceName": "runFromHome",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/runFromHome')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CinemaTickets",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-04-27T09:33:00",
						"endTime": "2023-04-29T07:31:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								50
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CinemaTickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module08_FACT')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Module08_FACT",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2023-06-22T09:45:00Z",
						"endTime": "2023-06-23T09:50:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Module08_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module_8_Task_3')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Module08_DIM",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2023-06-21T09:35:00Z",
						"endTime": "2023-07-03T13:50:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Module08_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TNF')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "build2fail",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2023-07-17T16:08:00",
						"endTime": "2023-07-17T17:15:00",
						"timeZone": "Romance Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/build2fail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_98n')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "MetadataDrivenCopyTask_98n_TopLevel",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2023-06-27T14:25:00",
						"endTime": "2023-07-03T13:55:00",
						"timeZone": "Romance Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_98n_TopLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_wvc')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "DeltaCopyPipeline_wvc",
						"type": "PipelineReference"
					},
					"parameters": {
						"windowStart": "[parameters('Trigger_wvc_properties_pipeline_parameters_windowStart')]",
						"windowEnd": "[parameters('Trigger_wvc_properties_pipeline_parameters_windowEnd')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2023-05-17T08:36:00Z",
					"endTime": "2023-05-18T08:36:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DeltaCopyPipeline_wvc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/generateTickets')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "generateTickets",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-04-27T09:30:00",
						"endTime": "2023-04-29T07:26:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								45
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/generateTickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureEastAustraliaIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"description": "Runtime Down Under",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/runFromHome')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "run From Home",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module08_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Module08"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "movies",
								"type": "LinkedServiceReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "Module_8_movies_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Module_8_DataMart_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "Module_8_DataMart_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "MoviesDC"
						},
						{
							"name": "OnlineSerrviceDC"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string,",
						"          MovieStatus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT M.*\\n,ms.MovieStatusName MovieStatus\\nfrom [dbo].[tMovies] M \\nINNER JOIN [dbo].[tMovieStatus] MS on M.MovieStatusID = MS.MovieStatusID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> tMovies",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"tMovies derive(CreatedDate = currentTimestamp(),",
						"          ModifiedDate = currentTimestamp()) ~> MoviesDC",
						"tOnlineService derive(CreatedDate = currentTimestamp(),",
						"          ModifiedDate = currentTimestamp()) ~> OnlineSerrviceDC",
						"MoviesDC sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DimMovie",
						"OnlineSerrviceDC sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_movies_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_DataMart_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_DataMart_DimOnlineService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module08_FACT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Module08"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Module_8_movies_vOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "vOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "Module_8_DataMart_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "Module_8_DataMart_DimDate",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						},
						{
							"dataset": {
								"referenceName": "Module_8_DataMart_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Module_8_DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "Module_8_DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "joinDimMovie"
						},
						{
							"name": "joinDimDate"
						},
						{
							"name": "joinDimOnlineService"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ServiceCode as string,",
						"          MovieidNK as integer,",
						"          Price as decimal(4,1),",
						"          TransactionDate as date,",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vOnlinePurchase",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          TheDateKey as integer,",
						"          TheDate as date,",
						"          TheDay as integer,",
						"          TheDayName as string,",
						"          TheWeek as integer,",
						"          TheISOWeek as integer,",
						"          TheDayOfWeek as integer,",
						"          TheMonth as integer,",
						"          TheMonthName as string,",
						"          TheQuarter as integer,",
						"          TheYear as integer,",
						"          TheFirstOfMonth as date,",
						"          TheLastOfYear as date,",
						"          TheDayOfYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimDate",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"vOnlinePurchase, DimMovie join(vOnlinePurchase@MovieidNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimMovie",
						"joinDimMovie, DimDate join(TransactionDate == TheDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimDate",
						"joinDimDate, DimOnlineService join(vOnlinePurchase@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimOnlineService",
						"joinDimOnlineService aggregate(groupBy(TheMonth,",
						"          MovieKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count()) ~> aggregate1",
						"joinDimOnlineService sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = TheDateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> FactOnlinePurchase",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey = TheMonth,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> FactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Module_8_movies_vOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_DataMart_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_DataMart_DimDate')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_DataMart_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_DataMart_FactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_DataMart_FactOnlinePurchase_MonthlySnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module08_FACT_V2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Module08"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "movies",
								"type": "LinkedServiceReference"
							},
							"name": "vOnlinePurchase"
						},
						{
							"linkedService": {
								"referenceName": "Module_8_ DataMart",
								"type": "LinkedServiceReference"
							},
							"name": "DimMovie"
						},
						{
							"linkedService": {
								"referenceName": "Module_8_ DataMart",
								"type": "LinkedServiceReference"
							},
							"name": "DimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Module_8_DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "Module_8_DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "joinDimMovie"
						},
						{
							"name": "joinDimOnlineService"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ServiceCode as string,",
						"          MovieidNK as integer,",
						"          Price as decimal(4,1),",
						"          DateKey as integer,",
						"          MonthKey as integer,",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT\\n OS.ServiceCode\\n,M.MovieidNK\\n,OP.Price\\n,CAST(FORMAT(OP.TransactionDate, \\'yyyyMMdd\\') as INT) DateKey\\n,CAST(FORMAT(OP.TransactionDate, \\'yyyyMM\\') as INT) MonthKey\\n,OP.TransactionId\\nfrom [dbo].[tOnlinePurchase] OP\\nINNER JOIN [dbo].[tOnlineService] OS ON OP.ServiceId = OS.ServiceId\\ninner join [dbo].[tMovies] M ON OP.MovieId = M.MovieID\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     partitionBy('dynamicRange', 200,",
						"          MovieidNK,",
						"          TransactionId",
						"     )) ~> vOnlinePurchase",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT MovieKey,MovieIdNK FROM [dbo].[DimMovie]',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     partitionBy('dynamicRange', 200,",
						"          MovieIdNK",
						"     )) ~> DimMovie",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select ServiceKey,ServiceCode from [dbo].[DimOnlineService]',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimOnlineService",
						"vOnlinePurchase, DimMovie join(vOnlinePurchase@MovieidNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('dynamicRange', 200,",
						"          MovieKey,",
						"          TransactionId",
						"     ),",
						"     broadcast: 'auto')~> joinDimMovie",
						"joinDimMovie, DimOnlineService join(vOnlinePurchase@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('dynamicRange', 200,",
						"          MovieKey,",
						"          TransactionId",
						"     ),",
						"     broadcast: 'auto')~> joinDimOnlineService",
						"joinDimOnlineService aggregate(groupBy(MonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count()) ~> aggregate1",
						"joinDimOnlineService sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> FactOnlinePurchase",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> FactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/movies')]",
				"[concat(variables('factoryId'), '/linkedServices/Module_8_ DataMart')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_DataMart_FactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/Module_8_DataMart_FactOnlinePurchase_MonthlySnapshot')]"
			]
		}
	]
}